{"version":3,"sources":["config.js","Utils/apollo.js","Components/Common/Loader.js","Components/Blog/BlogContainer.js","Components/Blog/Card/CardContainer.js","Components/Blog/Card/CardCategory.js","Components/Blog/Card/CardTitle.js","Components/Blog/Card/Card.js","Containers/Blog.js","Components/Post/PostContainer.js","Components/Post/PostTitle.js","Components/Post/PostDate.js","Components/Post/Author/AuthorDetails.js","Components/Post/Author/AuthorAvatar.js","Components/Post/Author/AuthorName.js","Containers/BlogPost.js","Router.js","Application.js","serviceWorker.js","index.js","Assets/Img/loader.svg"],"names":["config","backgroundColor","titleColor","subtitleColor","client","ApolloClient","uri","request","operation","setContext","headers","authorization","atob","LoaderContainer","styled","span","Loader","src","loader","alt","BlogContainer","div","CardContainer","StyledCategory","CardCategory","value","key","id","name","CardTitle","h2","Card","blog","useState","labels","setLabels","history","useHistory","useEffect","nodes","filter","onClick","title","number","push","className","undefined","split","map","i","moment","updatedAt","format","GET_POSTS","gql","Blog","posts","setPosts","useQuery","loading","error","data","console","repository","issues","v","PostContainer","PostTitle","h1","PostDate","p","AuthorDetails","AuthorAvatar","img","AuthorName","BlogHome","issueNumber","parseInt","window","location","href","pop","post","setPost","issue","author","login","Math","round","readingTime","body","minutes","options","overrides","a","component","children","props","target","rel","jsx","pre","language","style","docco","createBrowserHistory","require","Router","exact","path","BlogPost","Application","Helmet","charSet","content","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.6d31bc99.chunk.js","sourcesContent":["export const config = {\n  githubConvertedToken:\n    \"NjNkYTM0NTc1MzYxNGI5YjQ2ZDhmMzlkMmNhYTEzOTc3ZmI5Y2NmMQ==\",\n  githubUserName: \"tushar22211\",\n  githubRepo: \"blog-api\",\n  title: \"DevZone\",\n  subtitle: \"A Developers Zone\",\n  header: {\n    backgroundColor: \"#f1f6f8\",\n    titleColor: \"#ff5252\",\n    subtitleColor: \"#37474f\",\n  },\n};\n","import ApolloClient from \"apollo-boost\";\n\nimport { config } from \"../config\";\n\nexport const client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  request: (operation) => {\n    operation.setContext({\n      headers: {\n        authorization: `Bearer ${atob(config.githubConvertedToken)}`,\n      },\n    });\n  },\n});\n\nexport const userClient = (token) =>\n  new ApolloClient({\n    uri: \"https://api.github.com/graphql\",\n    request: (operation) => {\n      operation.setContext({\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n      });\n    },\n  });\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport loader from \"../../Assets/Img/loader.svg\";\n\nconst LoaderContainer = styled.span`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  img {\n    height: 128px;\n  }\n`;\n\nexport const Loader = () => (\n  <LoaderContainer>\n    <img src={loader} alt=\"Loading...\" />\n  </LoaderContainer>\n);\n","import styled from \"styled-components\";\n\nexport const BlogContainer = styled.div`\n  width: 90%;\n  margin: 2rem auto 0;\n  padding: 20px 10px;\n`;\n","import styled from \"styled-components\";\n\nexport const CardContainer = styled.div`\n  cursor: pointer;\n  border-radius: 10px,\n  transition: 0.2s;\n  position: relative;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledCategory = styled.div`\n  display: inline-block;\n  border: 1px solid;\n  border-color: rgba(3, 168, 124, 1);\n  border-radius: 5px;\n  padding: 0px 2px;\n  font-size: 10px;\n  text-transform: capitalize;\n  color: rgba(2, 158, 116, 1);\n  font-weight: 600;\n  line-height: 15px;\n  font-family: \"Quicksand\";\n  margin-right: 10px;\n`;\n\nexport const CardCategory = ({ value }) => (\n  <StyledCategory key={value.id}>{value.name}</StyledCategory>\n);\n","import styled from \"styled-components\";\n\nexport const CardTitle = styled.h2`\n  font-size: 18px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 1;\n  -webkit-box-orient: vertical;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { CardContainer, CardCategory, CardTitle } from \"./\";\nimport moment from \"moment\";\nimport \"./Card.css\";\n\nexport const Card = ({ blog }) => {\n  const [labels, setLabels] = useState([]);\n  const history = useHistory();\n\n  const openBlog = (title, number) => {\n    history.push(`/${title}/${number}`);\n  };\n\n  useEffect(() => {\n    const labels = blog.labels.nodes.filter((value) => {\n      return value.name !== \"blog\";\n    });\n\n    setLabels(labels);\n  }, [blog.labels.nodes]);\n\n  return (\n    <CardContainer>\n      <div onClick={() => openBlog(blog.title, blog.number)}>\n        <img\n          className=\"featuredImage\"\n          alt=\"\"\n          src={\n            blog.title.split(\"#\")[1] === undefined ||\n            blog.title.split(\"#\")[1] === \"\"\n              ? \"https://user-images.githubusercontent.com/16516879/80256421-51959880-869c-11ea-8618-c83fd8e25deb.jpg\"\n              : blog.title.split(\"#\")[1]\n          }\n        />\n        <div className=\"blogMeta\">\n          <CardTitle>\n            {blog.title.split(\"#\")[0]}\n            <br />\n            <br />\n          </CardTitle>\n          <div className=\"author\">\n            <div className=\"authorName\">\n              <>\n                {labels.map((value, i) => {\n                  return <CardCategory value={value} key={i} />;\n                })}\n              </>\n            </div>\n            <div className=\"blogDate\">\n              {moment(blog.updatedAt).format(\"DD MMM YYYY\")}\n            </div>\n          </div>\n        </div>\n      </div>\n    </CardContainer>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport \"./Blog.css\";\nimport { config } from \"../config\";\nimport { Loader } from \"../Components/Common\";\nimport { BlogContainer } from \"../Components/Blog\";\nimport { Card } from \"../Components/Blog/Card\";\n\nconst GET_POSTS = gql`\n{\n  repository(owner: \"${config.githubUserName}\", name: \"${config.githubRepo}\") {\n    issues(first: 10, states: OPEN, filterBy: { labels: \"blog\" }) {\n      nodes {\n        title\n        number\n        labels(first: 5) {\n          nodes {\n            name\n          }\n        }\n        author {\n          avatarUrl\n          login\n        }\n        updatedAt\n      }\n    }\n  }\n}\n`;\n\nconst Blog = () => {\n  const [posts, setPosts] = useState([]);\n  const { loading, error, data } = useQuery(GET_POSTS);\n\n  useEffect(() => {\n    if (!loading) {\n      if (error) {\n        console.error(error);\n      }\n\n      if (data) {\n        setPosts(data?.repository?.issues?.nodes);\n      }\n    }\n  }, [loading, error, data]);\n\n  return (\n    <>\n      <BlogContainer>\n        <div className=\"repo-cards-div-main\">\n          {loading ? (\n            <Loader />\n          ) : (\n            posts.map((v, i) => {\n              return (\n                <div className=\"repo-card-div\">\n                  <Card blog={v} key={i} />\n                </div>\n              );\n            })\n          )}\n        </div>\n      </BlogContainer>\n    </>\n  );\n};\n\nexport default Blog;\n","import styled from \"styled-components\";\n\nexport const PostContainer = styled.div`\n  margin: 2rem auto 0;\n  width: 90%;\n  max-width: 900px;\n  padding: 20px 10px;\n  position: relative;\n`;\n","import styled from \"styled-components\";\n\nexport const PostTitle = styled.h1`\n  @media only screen and (max-width: 768px) {\n    font-size: 30px;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const PostDate = styled.p`\n  color: rgba(0, 0, 0, 0.54);\n  font-weight: 400;\n  font-size: 14px;\n  margin-bottom: 0px;\n  margin-top: 0px;\n`;\n","import styled from \"styled-components\";\n\nexport const AuthorDetails = styled.div`\n  margin-top: 30px;\n  margin-bottom: 20px;\n  display: flex;\n  align-items: center;\n`;\n","import styled from \"styled-components\";\n\nexport const AuthorAvatar = styled.img`\n  width: 50px;\n  height: 50px;\n  border-radius: 40px;\n  margin: 10px;\n  margin-left: 0px;\n`;\n","import styled from \"styled-components\";\n\nexport const AuthorName = styled.p`\n  margin-bottom: 0px;\n  margin-top: 0px;\n  font-size: 16px;\n  color: rgba(0, 0, 0, 0.84);\n`;\n","import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport Markdown from \"markdown-to-jsx\";\nimport readingTime from \"reading-time\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport \"./BlogPost.css\";\nimport { config } from \"../config\";\nimport { Loader } from \"../Components/Common\";\nimport { PostContainer, PostTitle, PostDate } from \"../Components/Post\";\nimport {\n  AuthorDetails,\n  AuthorAvatar,\n  AuthorName,\n} from \"../Components/Post/Author\";\n\nexport default function BlogHome() {\n  const issueNumber = parseInt(window.location.href.split(\"/\").pop());\n  const GET_POSTS = gql`{\n    repository(owner: \"${config.githubUserName}\", name: \"${config.githubRepo}\") {\n      issue(number: ${issueNumber}) {\n        title\n        body\n        bodyHTML\n        number\n        author {\n          avatarUrl\n          login\n        }\n        updatedAt\n      }\n    }\n  }\n  `;\n  const [post, setPost] = useState([]);\n  // const [postNodeId, setPostNodeId] = useState(\"\");\n\n  const { loading, error, data } = useQuery(GET_POSTS);\n\n  const HyperLink = ({ children, ...props }) => (\n    <a\n      href={props.href}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      className=\"blog-post-anchor\"\n    >\n      {children}\n      <style jsx=\"true\">\n        {`\n          a {\n            color: #484848;\n            font-weight: 400;\n          }\n        `}\n      </style>\n    </a>\n  );\n\n  const CodeBlock = ({ children }) => (\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\n      {children.props.children}\n    </SyntaxHighlighter>\n  );\n\n  const MyParagraph = ({ children, ...props }) => <p {...props}>{children}</p>;\n\n  const MyImage = ({ children, ...props }) => (\n    <img alt=\"\" {...props}>\n      {children}\n    </img>\n  );\n\n  useEffect(() => {\n    if (!loading) {\n      if (data) {\n        const issues = data.repository.issue;\n        // setPostNodeId(issues.id);\n        setPost(issues);\n      }\n    }\n  }, [loading, error, data]);\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      {post.title && (\n        <PostContainer>\n          <PostTitle>{post.title}</PostTitle>\n          <div>\n            <AuthorDetails>\n              <AuthorAvatar\n                src={\n                  \"https://user-images.githubusercontent.com/16516879/80270058-9f2cf800-86d2-11ea-8ad2-4da3db6d3bba.png\"\n                }\n                alt={post.author.login}\n              />\n              <div>\n                <AuthorName>\n                  {post.author.login === \"tushar22211\" ||\n                  post.author.login === \"geekytushar\"\n                    ? \"Tushar Patil\"\n                    : post.author.login}\n                </AuthorName>\n                <PostDate>\n                  {moment(post.updatedAt).format(\"DD MMM YYYY\")}\n                  {\"    \"}({Math.round(readingTime(post.body).minutes)} Min\n                  Read)\n                </PostDate>\n              </div>\n            </AuthorDetails>\n          </div>\n          <Markdown\n            options={{\n              overrides: {\n                a: {\n                  component: HyperLink,\n                },\n                pre: {\n                  component: CodeBlock,\n                },\n                p: {\n                  component: MyParagraph,\n                  props: {\n                    className: \"disable-select\",\n                  },\n                },\n                img: {\n                  component: MyImage,\n                  props: {\n                    className: \"blog-image\",\n                  },\n                },\n              },\n            }}\n          >\n            {post.body}\n          </Markdown>\n        </PostContainer>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport Blog from \"./Containers/Blog\";\nimport BlogPost from \"./Containers/BlogPost\";\n\nvar createBrowserHistory = require(\"history\").createBrowserHistory;\nconst history = createBrowserHistory();\n\nconst Router = () => {\n  return (\n    <HashRouter history={history}>\n      <Switch>\n        <Route exact path=\"/\" component={Blog} />\n        <Route exact path=\"/:title/:issueNumber\" component={BlogPost} />\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default Router;\n","import React from \"react\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { Helmet } from \"react-helmet\";\nimport { config } from \"./config\";\nimport { client } from \"./Utils/apollo\";\nimport Router from \"./Router\";\n\nconst Application = () => {\n  return (\n    <>\n      <Helmet>\n        <title>{config.title}</title>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"description\" content={config.subtitle} />\n        <meta name=\"theme-color\" content={config.header.backgroundColor} />\n      </Helmet>\n      <ApolloProvider client={client}>\n        <Router />\n      </ApolloProvider>\n    </>\n  );\n};\n\nexport default Application;\n","const isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Application from \"./Application\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(<Application />, document.getElementById(\"root\"));\n\nif (process.env.NODE_ENV === \"production\") serviceWorker.register();\nelse serviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loader.bcdf0a41.svg\";"],"sourceRoot":""}